# Generated by Django 2.2.1 on 2019-06-22 09:38

from django.conf import settings
import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import simple_history.models


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('booking', '0025_auto_20190622_1618'),
    ]

    operations = [
        migrations.AlterField(
            model_name='artistprofile',
            name='location',
            field=models.ForeignKey(default='', on_delete=django.db.models.deletion.CASCADE, to='booking.Location'),
        ),
        migrations.AlterField(
            model_name='artistprofile',
            name='skill',
            field=models.ForeignKey(default='', on_delete=django.db.models.deletion.CASCADE, to='booking.Skill'),
        ),
        migrations.CreateModel(
            name='HistoricalBookingRequest',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('service_type', models.CharField(max_length=150)),
                ('booking_date', models.DateField()),
                ('booking_time', models.CharField(max_length=150)),
                ('service_fees', models.DecimalField(decimal_places=2, max_digits=9)),
                ('transportation_fees', models.DecimalField(decimal_places=2, max_digits=9)),
                ('subtotal_price', models.DecimalField(decimal_places=2, max_digits=9)),
                ('guest_no', models.IntegerField()),
                ('total_price', models.DecimalField(decimal_places=2, max_digits=9)),
                ('payer_name', models.CharField(max_length=150)),
                ('email', models.EmailField(max_length=150)),
                ('phone_number', models.CharField(blank=True, default='+855', max_length=13, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('language', models.CharField(max_length=100)),
                ('question', models.TextField(blank=True, max_length=150)),
                ('pickup_location', models.CharField(max_length=100)),
                ('gender', models.CharField(default='Male', max_length=6)),
                ('passport_id', models.CharField(max_length=100)),
                ('passport_exp_date', models.CharField(max_length=11)),
                ('promo_code', models.CharField(blank=True, max_length=20)),
                ('state', models.CharField(blank=True, choices=[('Draft', 'Draft'), ('Confirmed', 'Confirmed'), ('Cancel', 'Cancel'), ('Done', 'Done')], default='Draft', max_length=15)),
                ('remark', models.TextField(blank=True, max_length=250)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('artist', models.ForeignKey(blank=True, db_constraint=False, default='', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='booking.ArtistProfile')),
                ('facilitator', models.ForeignKey(blank=True, db_column='username', db_constraint=False, limit_choices_to={'is_superuser': False}, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, to_field='username')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical booking request',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalBlogProfile',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('slug', models.SlugField(blank=True, max_length=200)),
                ('creator_name', models.CharField(max_length=2000)),
                ('image', models.TextField(default='', max_length=100)),
                ('created_date', models.DateField(blank=True, editable=False)),
                ('created_time', models.TimeField(blank=True, editable=False)),
                ('location', models.CharField(max_length=200)),
                ('description', models.CharField(default='', max_length=1000)),
                ('content', models.TextField(max_length=20000)),
                ('source', models.CharField(max_length=500)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical blog profile',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalArtistProfile',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('firstname', models.CharField(max_length=30)),
                ('surname', models.CharField(max_length=30)),
                ('gender', models.CharField(choices=[('Male', 'Male'), ('Female', 'Female')], default='Male', max_length=6)),
                ('phone_number', models.CharField(default='+855', max_length=13, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('home_address_URL', models.CharField(blank=True, max_length=25)),
                ('experience_since', models.IntegerField(choices=[(1950, 1950), (1951, 1951), (1952, 1952), (1953, 1953), (1954, 1954), (1955, 1955), (1956, 1956), (1957, 1957), (1958, 1958), (1959, 1959), (1960, 1960), (1961, 1961), (1962, 1962), (1963, 1963), (1964, 1964), (1965, 1965), (1966, 1966), (1967, 1967), (1968, 1968), (1969, 1969), (1970, 1970), (1971, 1971), (1972, 1972), (1973, 1973), (1974, 1974), (1975, 1975), (1976, 1976), (1977, 1977), (1978, 1978), (1979, 1979), (1980, 1980), (1981, 1981), (1982, 1982), (1983, 1983), (1984, 1984), (1985, 1985), (1986, 1986), (1987, 1987), (1988, 1988), (1989, 1989), (1990, 1990), (1991, 1991), (1992, 1992), (1993, 1993), (1994, 1994), (1995, 1995), (1996, 1996), (1997, 1997), (1998, 1998), (1999, 1999), (2000, 2000), (2001, 2001), (2002, 2002), (2003, 2003), (2004, 2004), (2005, 2005), (2006, 2006), (2007, 2007), (2008, 2008), (2009, 2009), (2010, 2010), (2011, 2011), (2012, 2012), (2013, 2013), (2014, 2014), (2015, 2015), (2016, 2016), (2017, 2017), (2018, 2018), (2019, 2019)], default=2010, verbose_name='year')),
                ('work_at', models.CharField(blank=True, max_length=25)),
                ('exp_name', models.CharField(blank=True, max_length=100)),
                ('slug', models.SlugField(blank=True, max_length=100)),
                ('hour', models.IntegerField(default=1, validators=[django.core.validators.MaxValueValidator(10), django.core.validators.MinValueValidator(1)])),
                ('blocked_day', models.IntegerField()),
                ('available_time', django.contrib.postgres.fields.ArrayField(base_field=django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=20), size=None), size=None)),
                ('amenities', django.contrib.postgres.fields.ArrayField(base_field=django.contrib.postgres.fields.ArrayField(base_field=models.TextField(blank=True, default='Kid Friendly (Age 2+)'), size=None), size=None)),
                ('highlights', django.contrib.postgres.fields.ArrayField(base_field=django.contrib.postgres.fields.ArrayField(base_field=models.TextField(blank=True, max_length=500), size=None), size=None)),
                ('item_prepare', django.contrib.postgres.fields.ArrayField(base_field=django.contrib.postgres.fields.ArrayField(base_field=models.TextField(blank=True, max_length=500, null=True), blank=True, size=None), blank=True, null=True, size=None)),
                ('timeline', django.contrib.postgres.fields.ArrayField(base_field=django.contrib.postgres.fields.ArrayField(base_field=models.TextField(blank=True, max_length=500, null=True), size=None), null=True, size=None)),
                ('max_guest', models.IntegerField()),
                ('difficulty', models.CharField(choices=[('Easy', 'Easy'), ('Medium', 'Medium'), ('Hard', 'Hard'), ('Extreme', 'Extreme')], max_length=15)),
                ('price', models.DecimalField(decimal_places=2, max_digits=6)),
                ('exclude_amenities', django.contrib.postgres.fields.ArrayField(base_field=django.contrib.postgres.fields.ArrayField(base_field=models.TextField(blank=True, default='Internet Connection', null=True), size=None), size=None)),
                ('transportation_price', models.DecimalField(decimal_places=2, max_digits=6, null=True)),
                ('star', models.IntegerField(default=1, validators=[django.core.validators.MaxValueValidator(5), django.core.validators.MinValueValidator(1)])),
                ('no_book', models.IntegerField(blank=True)),
                ('profile_picture', models.TextField(max_length=100)),
                ('video', models.TextField(blank=True, max_length=100)),
                ('cover_picture1', models.TextField(max_length=100)),
                ('cover_picture2', models.TextField(max_length=100)),
                ('cover_picture3', models.TextField(max_length=100)),
                ('cover_picture4', models.TextField(max_length=100)),
                ('story', models.TextField(blank=True)),
                ('comment', models.TextField(blank=True)),
                ('description', models.TextField(blank=True)),
                ('folioImg1', models.TextField(max_length=100)),
                ('folioImg2', models.TextField(max_length=100)),
                ('folioImg3', models.TextField(max_length=100)),
                ('folioImg4', models.TextField(max_length=100)),
                ('folioImg5', models.TextField(blank=True, max_length=100)),
                ('folioImg6', models.TextField(blank=True, max_length=100)),
                ('folioImg7', models.TextField(blank=True, max_length=100)),
                ('folioImg8', models.TextField(blank=True, max_length=100)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('location', models.ForeignKey(blank=True, db_constraint=False, default='', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='booking.Location')),
                ('skill', models.ForeignKey(blank=True, db_constraint=False, default='', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='booking.Skill')),
            ],
            options={
                'verbose_name': 'historical artist profile',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
    ]
